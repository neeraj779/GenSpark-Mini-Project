// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StudentManagementAPI.Migrations
{
    [DbContext(typeof(StudentManagementContext))]
    [Migration("20240529092050_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseCode");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<DateTime>("ClassDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseOfferingId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseOfferingId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.ClassAttendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassAttendances");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Course", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseCredit")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseCode");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseCode = "CSE101",
                            CourseCredit = 3,
                            CourseName = "Introduction to Computer Science"
                        },
                        new
                        {
                            CourseCode = "CSE102",
                            CourseCredit = 4,
                            CourseName = "Data Structures"
                        },
                        new
                        {
                            CourseCode = "CSE103",
                            CourseCredit = 2,
                            CourseName = "Algorithms"
                        },
                        new
                        {
                            CourseCode = "CSE104",
                            CourseCredit = 3,
                            CourseName = "Database Management Systems"
                        },
                        new
                        {
                            CourseCode = "CSE105",
                            CourseCredit = 2,
                            CourseName = "Operating Systems"
                        },
                        new
                        {
                            CourseCode = "CSE106",
                            CourseCredit = 2,
                            CourseName = "Computer Networks"
                        },
                        new
                        {
                            CourseCode = "CSE107",
                            CourseCredit = 4,
                            CourseName = "Software Engineering"
                        },
                        new
                        {
                            CourseCode = "CSE108",
                            CourseCredit = 3,
                            CourseName = "Web Development"
                        },
                        new
                        {
                            CourseCode = "CSE109",
                            CourseCredit = 4,
                            CourseName = "Artificial Intelligence"
                        },
                        new
                        {
                            CourseCode = "CSE110",
                            CourseCredit = 3,
                            CourseName = "Machine Learning"
                        },
                        new
                        {
                            CourseCode = "CSE201",
                            CourseCredit = 3,
                            CourseName = "Object-Oriented Programming"
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.CourseOffering", b =>
                {
                    b.Property<int>("CourseOfferingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseOfferingId"), 1L, 1);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CourseOfferingId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("TeacherId");

                    b.ToTable("CourseOfferings");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 4000,
                            DateOfBirth = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Computer Science",
                            Email = "singh.priya@gmail.com",
                            FullName = "Ms. Priya Singh",
                            Gender = "Female",
                            Phone = "9374729561",
                            RollNo = "CSE2020001",
                            Status = "Undergraduate"
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"), 1L, 1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("Date");

                    b.HasKey("SubmissionId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = 2000,
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kumar.naresh@gmail.com",
                            FullName = "Mr. Naresh Kumar",
                            Gender = "Male",
                            Phone = "9876543210"
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 100,
                            Password = new byte[] { 245, 216, 40, 147, 219, 216, 187, 15, 155, 6, 134, 169, 82, 120, 56, 99, 32, 185, 132, 5, 231, 98, 229, 190, 26, 202, 8, 63, 108, 199, 58, 141, 78, 199, 89, 243, 136, 160, 71, 20, 132, 60, 137, 173, 59, 222, 40, 114, 34, 87, 117, 226, 34, 126, 114, 238, 132, 70, 84, 8, 233, 157, 194, 211 },
                            PasswordHashKey = new byte[] { 198, 45, 235, 101, 175, 167, 100, 30, 25, 68, 250, 24, 126, 138, 69, 254, 101, 75, 209, 174, 31, 116, 142, 182, 16, 12, 207, 129, 241, 5, 223, 192, 135, 86, 33, 242, 155, 19, 236, 51, 22, 89, 116, 186, 158, 39, 18, 115, 99, 229, 224, 247, 130, 176, 116, 114, 59, 246, 205, 134, 41, 89, 108, 99, 118, 136, 191, 109, 156, 93, 235, 221, 46, 207, 79, 83, 228, 139, 81, 215, 10, 95, 158, 72, 162, 239, 50, 46, 37, 232, 233, 196, 177, 215, 212, 31, 102, 167, 172, 32, 204, 59, 70, 220, 75, 94, 54, 236, 53, 61, 7, 212, 254, 37, 196, 53, 3, 50, 183, 18, 206, 232, 130, 249, 214, 90, 86, 196 },
                            RegistrationDate = new DateTime(2024, 5, 29, 9, 20, 50, 436, DateTimeKind.Utc).AddTicks(4918),
                            Role = 0,
                            Status = "Active",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Assignment", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Class", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.CourseOffering", "CourseOffering")
                        .WithMany("Classes")
                        .HasForeignKey("CourseOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseOffering");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.ClassAttendance", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Class", "Class")
                        .WithMany("ClassAttendances")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Student", "Student")
                        .WithMany("ClassAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.CourseOffering", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Course", "Course")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Teacher", "Teacher")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Enrollment", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Student", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Submission", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Teacher", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Class", b =>
                {
                    b.Navigation("ClassAttendances");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CourseOfferings");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.CourseOffering", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Student", b =>
                {
                    b.Navigation("ClassAttendances");

                    b.Navigation("Enrollments");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Teacher", b =>
                {
                    b.Navigation("CourseOfferings");
                });
#pragma warning restore 612, 618
        }
    }
}
