// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StudentManagementAPI.Migrations
{
    [DbContext(typeof(StudentManagementContext))]
    [Migration("20240530040406_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseCode");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<DateTime>("ClassDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseOfferingId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseOfferingId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            ClassDateAndTime = new DateTime(2024, 5, 6, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 1
                        },
                        new
                        {
                            ClassId = 2,
                            ClassDateAndTime = new DateTime(2024, 5, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 1
                        },
                        new
                        {
                            ClassId = 3,
                            ClassDateAndTime = new DateTime(2024, 5, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 1
                        },
                        new
                        {
                            ClassId = 4,
                            ClassDateAndTime = new DateTime(2024, 5, 12, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 1
                        },
                        new
                        {
                            ClassId = 5,
                            ClassDateAndTime = new DateTime(2024, 5, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 1
                        },
                        new
                        {
                            ClassId = 6,
                            ClassDateAndTime = new DateTime(2024, 5, 7, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 2
                        },
                        new
                        {
                            ClassId = 7,
                            ClassDateAndTime = new DateTime(2024, 5, 9, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 2
                        },
                        new
                        {
                            ClassId = 8,
                            ClassDateAndTime = new DateTime(2024, 5, 11, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 2
                        },
                        new
                        {
                            ClassId = 9,
                            ClassDateAndTime = new DateTime(2024, 5, 13, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 2
                        },
                        new
                        {
                            ClassId = 10,
                            ClassDateAndTime = new DateTime(2024, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseOfferingId = 2
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.ClassAttendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassAttendances");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Course", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseCredit")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseCode");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseCode = "CSE101",
                            CourseCredit = 3,
                            CourseName = "Introduction to Computer Science"
                        },
                        new
                        {
                            CourseCode = "CSE102",
                            CourseCredit = 4,
                            CourseName = "Data Structures"
                        },
                        new
                        {
                            CourseCode = "CSE103",
                            CourseCredit = 2,
                            CourseName = "Algorithms"
                        },
                        new
                        {
                            CourseCode = "CSE104",
                            CourseCredit = 3,
                            CourseName = "Database Management Systems"
                        },
                        new
                        {
                            CourseCode = "CSE105",
                            CourseCredit = 2,
                            CourseName = "Operating Systems"
                        },
                        new
                        {
                            CourseCode = "CSE106",
                            CourseCredit = 2,
                            CourseName = "Computer Networks"
                        },
                        new
                        {
                            CourseCode = "CSE107",
                            CourseCredit = 4,
                            CourseName = "Software Engineering"
                        },
                        new
                        {
                            CourseCode = "CSE108",
                            CourseCredit = 3,
                            CourseName = "Web Development"
                        },
                        new
                        {
                            CourseCode = "CSE109",
                            CourseCredit = 4,
                            CourseName = "Artificial Intelligence"
                        },
                        new
                        {
                            CourseCode = "CSE110",
                            CourseCredit = 3,
                            CourseName = "Machine Learning"
                        },
                        new
                        {
                            CourseCode = "CSE201",
                            CourseCredit = 3,
                            CourseName = "Object-Oriented Programming"
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.CourseOffering", b =>
                {
                    b.Property<int>("CourseOfferingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseOfferingId"), 1L, 1);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CourseOfferingId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("TeacherId");

                    b.ToTable("CourseOfferings");

                    b.HasData(
                        new
                        {
                            CourseOfferingId = 1,
                            CourseCode = "CSE101",
                            TeacherId = 2000
                        },
                        new
                        {
                            CourseOfferingId = 2,
                            CourseCode = "CSE102",
                            TeacherId = 2001
                        },
                        new
                        {
                            CourseOfferingId = 3,
                            CourseCode = "CSE103",
                            TeacherId = 2002
                        },
                        new
                        {
                            CourseOfferingId = 4,
                            CourseCode = "CSE104",
                            TeacherId = 2003
                        },
                        new
                        {
                            CourseOfferingId = 5,
                            CourseCode = "CSE105",
                            TeacherId = 2004
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 1,
                            CourseCode = "CSE101",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4000
                        },
                        new
                        {
                            EnrollmentId = 2,
                            CourseCode = "CSE102",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4000
                        },
                        new
                        {
                            EnrollmentId = 3,
                            CourseCode = "CSE103",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4000
                        },
                        new
                        {
                            EnrollmentId = 4,
                            CourseCode = "CSE101",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4001
                        },
                        new
                        {
                            EnrollmentId = 5,
                            CourseCode = "CSE102",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4001
                        },
                        new
                        {
                            EnrollmentId = 6,
                            CourseCode = "CSE103",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4001
                        },
                        new
                        {
                            EnrollmentId = 7,
                            CourseCode = "CSE101",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4002
                        },
                        new
                        {
                            EnrollmentId = 8,
                            CourseCode = "CSE102",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4002
                        },
                        new
                        {
                            EnrollmentId = 9,
                            CourseCode = "CSE103",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4003
                        },
                        new
                        {
                            EnrollmentId = 10,
                            CourseCode = "CSE101",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4003
                        },
                        new
                        {
                            EnrollmentId = 11,
                            CourseCode = "CSE102",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4003
                        },
                        new
                        {
                            EnrollmentId = 12,
                            CourseCode = "CSE103",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4003
                        },
                        new
                        {
                            EnrollmentId = 13,
                            CourseCode = "CSE101",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4004
                        },
                        new
                        {
                            EnrollmentId = 14,
                            CourseCode = "CSE102",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4004
                        },
                        new
                        {
                            EnrollmentId = 15,
                            CourseCode = "CSE103",
                            EnrollmentDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 4004
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 4000,
                            DateOfBirth = new DateTime(1998, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Computer Science",
                            Email = "raj.patel@gmail.com",
                            FullName = "Mr. Raj Patel",
                            Gender = "Male",
                            Phone = "9374729562",
                            RollNo = "CSE2020002",
                            Status = 0
                        },
                        new
                        {
                            StudentId = 4001,
                            DateOfBirth = new DateTime(2000, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Electronics and Communication",
                            Email = "neha.desai@gmail.com",
                            FullName = "Ms. Neha Desai",
                            Gender = "Female",
                            Phone = "9374729563",
                            RollNo = "ECE2020001",
                            Status = 0
                        },
                        new
                        {
                            StudentId = 4002,
                            DateOfBirth = new DateTime(1997, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Mechanical Engineering",
                            Email = "amit.sharma@gmail.com",
                            FullName = "Mr. Amit Sharma",
                            Gender = "Male",
                            Phone = "9374729564",
                            RollNo = "ME2020001",
                            Status = 0
                        },
                        new
                        {
                            StudentId = 4003,
                            DateOfBirth = new DateTime(1999, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Electrical Engineering",
                            Email = "sneha.rao@gmail.com",
                            FullName = "Ms. Sneha Rao",
                            Gender = "Female",
                            Phone = "9374729565",
                            RollNo = "EE2020001",
                            Status = 0
                        },
                        new
                        {
                            StudentId = 4004,
                            DateOfBirth = new DateTime(1996, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Civil Engineering",
                            Email = "vivek.gupta@gmail.com",
                            FullName = "Mr. Vivek Gupta",
                            Gender = "Male",
                            Phone = "9374729566",
                            RollNo = "CE2020001",
                            Status = 0
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"), 1L, 1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("Date");

                    b.HasKey("SubmissionId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = 2000,
                            DateOfBirth = new DateTime(1978, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sunita.verma@gmail.com",
                            FullName = "Dr. Sunita Verma",
                            Gender = "Female",
                            Phone = "9876543212"
                        },
                        new
                        {
                            TeacherId = 2001,
                            DateOfBirth = new DateTime(1975, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ramesh.gupta@gmail.com",
                            FullName = "Mr. Ramesh Gupta",
                            Gender = "Male",
                            Phone = "9876543213"
                        },
                        new
                        {
                            TeacherId = 2002,
                            DateOfBirth = new DateTime(1982, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anjali.mehta@gmail.com",
                            FullName = "Ms. Anjali Mehta",
                            Gender = "Female",
                            Phone = "9876543214"
                        },
                        new
                        {
                            TeacherId = 2003,
                            DateOfBirth = new DateTime(1970, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vijay.patil@gmail.com",
                            FullName = "Mr. Vijay Patil",
                            Gender = "Male",
                            Phone = "9876543215"
                        },
                        new
                        {
                            TeacherId = 2004,
                            DateOfBirth = new DateTime(1983, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seema.reddy@gmail.com",
                            FullName = "Dr. Seema Reddy",
                            Gender = "Female",
                            Phone = "9876543216"
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 100,
                            Password = new byte[] { 24, 250, 89, 157, 161, 107, 88, 171, 29, 52, 107, 196, 248, 250, 188, 198, 66, 136, 214, 38, 28, 157, 190, 113, 63, 242, 242, 115, 4, 246, 153, 95, 38, 255, 49, 160, 215, 185, 136, 155, 147, 76, 168, 130, 21, 61, 17, 240, 253, 138, 58, 127, 147, 130, 195, 233, 46, 175, 106, 234, 144, 209, 32, 187 },
                            PasswordHashKey = new byte[] { 13, 48, 252, 105, 56, 139, 244, 165, 205, 82, 60, 75, 161, 10, 213, 20, 175, 3, 144, 78, 21, 188, 169, 69, 5, 149, 81, 94, 22, 193, 63, 155, 177, 245, 23, 236, 224, 0, 101, 58, 159, 234, 15, 85, 219, 79, 193, 43, 34, 222, 173, 31, 123, 228, 209, 80, 8, 87, 8, 247, 88, 24, 37, 54, 162, 247, 30, 190, 164, 133, 39, 106, 125, 129, 117, 160, 126, 18, 152, 56, 141, 94, 136, 228, 223, 226, 172, 159, 226, 79, 46, 143, 43, 210, 177, 90, 209, 92, 20, 195, 173, 111, 58, 181, 218, 57, 255, 218, 207, 73, 98, 102, 85, 147, 94, 183, 64, 59, 110, 36, 115, 217, 222, 123, 229, 122, 171, 242 },
                            RegistrationDate = new DateTime(2024, 5, 30, 4, 4, 5, 714, DateTimeKind.Utc).AddTicks(9472),
                            Role = 0,
                            Status = "Active",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Assignment", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Class", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.CourseOffering", "CourseOffering")
                        .WithMany("Classes")
                        .HasForeignKey("CourseOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseOffering");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.ClassAttendance", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Class", "Class")
                        .WithMany("ClassAttendances")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Student", "Student")
                        .WithMany("ClassAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.CourseOffering", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Course", "Course")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Teacher", "Teacher")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Enrollment", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Student", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Submission", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementAPI.Models.DBModels.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Teacher", b =>
                {
                    b.HasOne("StudentManagementAPI.Models.DBModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Class", b =>
                {
                    b.Navigation("ClassAttendances");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CourseOfferings");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.CourseOffering", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Student", b =>
                {
                    b.Navigation("ClassAttendances");

                    b.Navigation("Enrollments");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("StudentManagementAPI.Models.DBModels.Teacher", b =>
                {
                    b.Navigation("CourseOfferings");
                });
#pragma warning restore 612, 618
        }
    }
}
